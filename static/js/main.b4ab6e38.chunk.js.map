{"version":3,"sources":["weatherData.js","forecast.js","App.js","serviceWorker.js","index.js"],"names":["Weather","countryName","cityName","description","temp","icon","maxTemp","minTemp","className","src","alt","Math","round","Forecast","useState","setCountryName","setDescription","setIcon","setTemp","setMaxTemp","setMinTemp","setCityName","sunrise","setSunrise","sunset","setSunset","query","setQuery","search","setSearch","useEffect","url","fetch","then","response","json","data","name","sys","country","weather","main","temp_max","temp_min","catch","error","console","log","onChange","e","target","value","type","placeholder","onClick","preventDefault","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b4ab6e38.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.css\";\r\n\r\nfunction Weather({countryName,cityName, description, temp,icon, maxTemp, minTemp}) {\r\n\r\n    return (\r\n        <div className=\"weather-card rounded\">\r\n            <div>\r\n                <h1 className=\"primary-font text-center\">{cityName}, {countryName}</h1>\r\n                {/* <p className=\"numeric-font text-center\">Mon, 2:25 PM</p> */}\r\n                <div className=\"container row flex-column pl-5\">\r\n                    <div className=\"row d-flex justify-content-start mt-5\">\r\n                        <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"icon\"/>\r\n                        <h2 className=\"sub-heading my-auto text-capitalize\">{description} </h2>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 \">\r\n                            <h1 className=\"large-heading numeric-font\">{Math.round(temp)}&deg;</h1>\r\n                        </div>\r\n                        <div className=\"col-6 d-flex justify-content-end align-items-center\">\r\n                            <div>\r\n                                <p className=\"temp-font border-bottom m-0 p-0\">{Math.round(maxTemp)}&deg;C</p>\r\n                                <p className=\"temp-font m-0 p-0\">{Math.round(minTemp)}&deg;C</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row d-flex justify-content-center align-items-center mb-2 \">\r\n                        {/* <div>\r\n                            <p className=\"temp-font border-bottom m-0 p-0\"><span><i class=\"fas fa-sun\"></i></span>{sunriseTime}</p>\r\n                            <p className=\"temp-font m-0 p-0\"><span><i class=\"fas fa-moon\"></i></span>{sunsetTime}</p>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React, { useState, useEffect} from 'react';\r\nimport Weather from './weatherData';\r\nimport \"./weather.css\";\r\n\r\nfunction Forecast (){\r\n\r\n// state - \r\n  const [countryName, setCountryName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [icon, setIcon] = useState('');\r\n  const [temp, setTemp] = useState('');\r\n  const [maxTemp, setMaxTemp] = useState('');\r\n  const [minTemp, setMinTemp] = useState('');\r\n  const [cityName, setCityName] = useState('')\r\n  const [sunrise, setSunrise] = useState();\r\n  const [sunset, setSunset] = useState();\r\n\r\n  const [query, setQuery] = useState('delhi');\r\n  const [search, setSearch] = useState('');\r\n  // const [load, setLoad] = useState(false);\r\n\r\n  // Reach-Hook Lifecycle Methods -\r\n  \r\n  useEffect(()=>{\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&APPID=11a9b4da876bfdca782f464bb924c855`;\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data =>{\r\n          //   setWeatherData(data)\r\n            setCityName(data.name)\r\n            setCountryName(data.sys.country)\r\n            setDescription(data.weather[0].description)\r\n            setIcon(data.weather[0].icon)\r\n            setTemp(data.main.temp)\r\n            setMaxTemp(data.main.temp_max)\r\n            setMinTemp(data.main.temp_min)\r\n            setSunrise(data.sys.sunrise)\r\n            setSunset(data.sys.sunset)\r\n        }\r\n      )\r\n      .catch(error => console.log(error));\r\n\r\n  },[query])\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n    // console.log(search);\r\n  };\r\n\r\n  const getSearch = (e)=>{\r\n    e.preventDefault()\r\n    setQuery(search)\r\n    setSearch(\"\")\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n        {/* {console.log(this.state.weatherData)} */}\r\n        \r\n          <div className=\"input-box\">\r\n            <input className=\"search-bar\" onChange={updateSearch} type=\"text\" placeholder=\"Enter Your City\" value={search}/>\r\n            <button className=\"search-button\" onClick={getSearch} title=\"search your city\"><i className=\"fas fa-search-location\"></i></button>\r\n          </div>\r\n        \r\n        <Weather  \r\n            countryName={countryName} \r\n            description={description} \r\n            icon={icon} \r\n            temp={temp} \r\n            cityName={cityName}\r\n            maxTemp={maxTemp}\r\n            minTemp={minTemp}\r\n            sunrise={sunrise}\r\n            sunset={sunset}\r\n         />\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\n// import Weather from './weather';\nimport './App.css';\nimport Forecast from './forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}